from aiogram import types, Router, F
from aiogram.types import InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from db.models import Users
from db.engine import AsyncSessionLocal
from db.orm_query import orm_chek_promo, orm_chek_users, orm_get_banner
from handlers.menu_proccesing import game_catalog, get_menu_content, zaglushka
#from aiogram.fsm.state import StatesGroup
from inlinekeyboars.inline_kbcreate import Menucallback, get_keyboard, inkbcreate,inkbcreate_url
user_router = Router()







@user_router.message(F.text.lower().contains('start') | F.text.lower().contains('—Å—Ç–∞—Ä—Ç'))
@user_router.message(CommandStart())
async def start(message:types.Message):
    async with AsyncSessionLocal as session:
        useid = message.from_user.id
        banner = await orm_get_banner(session, "start")
        result = await orm_chek_users(session, useid)

        if not result:
            add_in_Users = Users(user_id=useid)
            session.add(add_in_Users)
            await session.commit()
        
        kbds = get_keyboard(btns={
            "—Ç–≥ –∫–∞–Ω–∞–ªüì∫",
            "–º–µ–Ω—é",
            "ü§ì–æ—Ç–∑—ã–≤—ã"
        })      
        await message.answer_photo(photo=banner.image, caption=banner.description, reply_markup=kbds)

@user_router.message(F.text.lower().contains('—Ç–≥ '))
async def tgchennel(message: types.Message):
    await message.answer("–°—Å—ã–ª–æ—á–∫–∞ –≤–Ω–∏–∑—É ‚¨áÔ∏è", reply_markup=inkbcreate_url(btns={
        "–Ω–∞–∂–º–∏": "https://t.me/s/serega_pirat2"
    }))

@user_router.message(F.text.lower().contains('–æ—Ç–∑—ã–≤—ã'))
async def otzivi(message: types.Message):
    await message.answer("https://vk.com/topic-214629131_49341013?offset=20", reply_markup=inkbcreate_url(btns={
        "–û—Ç–∑—ã–≤—ã": "https://–≤–æ-–≤—Å–µ-—Ç—è–∂–∫–∏–µ.—Ä—Ñ/episodes/3-season-10-series/"
    }))

@user_router.callback_query(F.data == 'menu')
@user_router.message(F.text.lower().contains('menu') | F.text.lower().contains('–º–µ–Ω—é'))
async def menu_handler(message: types.Message | types.CallbackQuery, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–æ–º
    is_callback = isinstance(message, types.CallbackQuery)

    if is_callback:
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é...")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ media.media ‚Äî —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
    if isinstance(media, InputMediaPhoto):
        if is_callback:
            await message.message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)
        else:
            await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)

@user_router.callback_query(Menucallback.filter())
async def user_manu(callback: types.CallbackQuery, callback_data: Menucallback, session: AsyncSession):

    result = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name
    )
    if result is None:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    media, reply_markup = result
    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()

@user_router.callback_query(F.data.startswith('show_cat_'))
async def process_show_cat(callback_query: types.CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–ª–±–µ–∫-–¥–∞–Ω–Ω—ã—Ö
    game_cat = callback_query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    media, kbds = await game_catalog(session, game_cat, level=2)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_media(media=media, reply_markup=kbds)
    await callback_query.answer()

@user_router.callback_query(F.data.startswith('show_'))
async def process_show_game(callback_query: types.CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–ª–±–µ–∫-–¥–∞–Ω–Ω—ã—Ö
    tovar = callback_query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    media, kbds = await zaglushka(session, tovar, level=3)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_media(media=media, reply_markup=kbds)
    await callback_query.answer()
###########################–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞################
class GetPromo(StatesGroup):
    Promo = State()

@user_router.callback_query(F.data == ('promo'))
async def chek_promocode(callback:types.CallbackQuery, state:FSMContext, session: AsyncSession, level = 3):
    banner = await orm_get_banner(session, "catalog")
    image = None
    if banner:
        image = InputMediaPhoto(
            media=banner.image,
            caption="\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
        )
    await callback.message.edit_media(media=image, reply_markup=inkbcreate(btns={
        '–æ—Ç–º–µ–Ω–∞':    Menucallback(level=level -2, menu_name='game_catalog').pack()
    }))
    await state.set_state(GetPromo.Promo)
    #await callback.message.delete()

@user_router.message(GetPromo.Promo)
async def get_promocode(message:types.Message, session: AsyncSession):
    promo = message.text
    result = await orm_chek_promo(session, promo)
    if result:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç')
        return
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞', reply_markup=inkbcreate(btns={
            '–í –º–µ–Ω—é':   'menu'
        }))
        return





@user_router.message()
async def nullmessage(message: types.Message):
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å—Ç–∞—Ä—Ç')